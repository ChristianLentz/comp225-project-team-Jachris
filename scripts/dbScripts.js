/**
 * This file contains backend functionality for linking our site to our databse.
 * 
 * Our database is built using the Firebase feature Cloud Firestore, using NoSQL.
 * 
 * Our database will contain two collections: users and posts. 
 * 
 * Each document within the users collection will represent one user or one post. The 
 * naming convention for each document will be userX or postX, where X is a positive 
 * integer representing the order in which the post/user was added to the site. For
 * example, user137 created their account and was added to the DB before user138. 
 * 
 * Each user will have the following items within its document: 
 * 
 *      - user_email: string
 *      - user_password: string 
 *      - userID: an integer > 0
 * 
 * Note that the user will provide everything excepth for a userID, this we provide to 
 * each user upon creation of their account. 
 * 
 * Each post will have the following items within its document:
 * 
 *      - post_title: string 
 *      - post_price: real number > 0 (will default to zero if sell is false)
 *      - post_msg: a string with a description of the post
 *      - date_posted: a string in the format mm/dd/yyyy
 *      - user_name: a string coresponding to the user who who posted
 *      - user_email: a string corresponding to email of the user who posted
 *      - post_userID: an integer > 0 corresponding to the user who posted 
 *      - postID: an integer > 0
 * 
 * Similar to users, the postID will be generated by us upon creation of the post. 
 *
 * More items will be added as we move past the minimum viable product phase and 
 * implement more features. These may include: 
 * 
 *      - A sub-collection for each user to define their tags/prefs
 *      - A sub-collection for each post to define the tags given to it by the poster
 * 
 * We are exporting async functions here, which can only be called during asynchronous 
 * actions.
 */

// import firestore functions from firebase library 
import { 
    collection, 
    doc, 
    setDoc, 
    getDoc, 
    getDocs, 
    updateDoc
} from "firebase/firestore";

/**
 * Some notes: 
 * 
 *  - The 'doc' function returns a refernce to a document, which we can then write to or 
 *  use to get data!
 *  - We can use 'setDoc' to add data to a document. If the document DNE, it will be created (we must 
 *  provide an ID for the doc in this case), if the doc does exist, then we can overwrite the whole 
 *  thing or use 'merge'
 *  - We can store strings, booleans, numbers (as doubles), dates, null, and nested arrays
 *  and objects in a collection in firestore
 *  - If we want to create a document but don't have a meaningful ID to provide, then we can use 'add'
 *  to create the doc and generate an ID
 */

/**
 * Get all users from the db according to the given query. 
 * 
 * @param {Firestore} db a reference to cloud firestore
 * @param {query} query 
 */
export async function getAllUsers (db, query) { 

}

/**
 * Get all posts from the db according to the given query. 
 * 
 * @param {Firestore} db a reference to cloud firestore
 * @param {query} query  
 */
export async function getAllPosts (db, query) { 

}

/**
 * Get all posts associated with a given user in ascending order sorted by postID
 * 
 * @param {Firestore} db a reference to cloud firestore 
 * @param {Number} userID 
 */
export async function getAllPostsForUser (db, userID) { 

}

/**
 * Get data for a specific user from the DB. 
 * 
 * THIS NEEDS TO BE TESTED!!!
 * 
 * @param {Firestore} db a reference to cloud firestore
 * @param {Number} userID 
 */
export async function getUserData (db, userID) { 
    return await getAllDocumentData(db, 'users/user' + userID.toString());
}

/**
 * Get data for a specific post from the DB. 
 * 
 * THIS NEEDS TO BE TESTED!!!
 * 
 * @param {Firestore} db a reference to firestore 
 * @param {Number} postID 
 */
export async function getPostData (postID) { 
    return await getAllDocumentData(db, 'posts/post' + postID.toString());
}

/**
 * Add a newly created user and their data to the users collection
 * 
 * THIS NEEDS TO RUN WITH USER AUTH! 
 * 
 * @param {Firestore} db a reference to firestore 
 * @param {Array} data 
 */
export async function createUser (db, data) { 
    // get total number of users in the collection 
    // FIX THIS, should not be based on totals, this will not guarantee that IDs are unique if we all deletion!!
    const numUsers = await getValueOfField(db, 'metrics/totals', "total_users", 0);
    // generate a new userID  
    const newUserID = numUsers + 1; 
    data.push({key: "userID", value: newUserID});
    // cast data array to object, generate refernce to user doc, write to doc
    const dataObj = Object.assign({}, data);
    const userRef = doc(db, 'users/user' + newUserID.toString());
    setDoc(userRef, dataObj)
        .then(() => { 
            console.log(`user '${userRef.id}' has been added to users collection`); 
        })
        .catch((error) => { 
            console.log(`Error when create user '${userRef.id}': '${error}'`);
        }); 
    // increment the number of users 
    const totalsRef = doc(db, 'metrics/totals');
    setDoc(totalsRef, {total_users: newUserID}, {merge : true})
        .then(() => { 
            console.log(`total users is now: '${newUserID}'`); 
        })
        .catch((error) => { 
            console.log(`Error when incrementing user count: '${error}'`);
        }); 
}

/**
 * Add a newly created post and its data to the posts collection
 * 
 * THIS NEEDS MORE CHECKING BEFORE BEING CALLED!!
 * - ensure that the post form has been entire filled out 
 * - ensure that the email provided is: 
 *      - a valid macalester email 
 *      - associated with an authenticated user 
 * 
 * @param {Firestore} db a reference to firestore
 * @param {Array} data 
 */
export async function createPost (db, data) { 
    // generate an ID for the post
    // FIX THIS, should not be based on totals, this will not guarantee that IDs are unique if we all deletion!!
    const numPosts = await getValueOfField(db, 'metrics/totals', "total_posts", 0); 
    const newPostID = numPosts + 1;
    data.push({key: "postID", value: newPostID});
    // generate a userID associated with the post - FINISH THIS !!!
    const userPostRef = null; 
    const newPostUserID = null;
    data.push({key: "post_userID", value: newPostUserID}); 
    // generate date posted 
    const datePosted = getTodayDate(); 
    data.push({key: "date_posted", value: datePosted}); 
    // cast data array to object, generate refernce to user doc, write to doc 
    const dataObj = Object.assign({}, data);
    const postRef = doc(db, 'posts/post' + newPostID.toString()); 
    setDoc(postRef, dataObj)
        .then(() => { 
            console.log(`post '${postRef.id}' has been added to posts collection`); 
        })
        .catch((error) => { 
            console.log(`Error when create post '${postRef.id}': '${error}'`);
        }); 
    // increment the number of posts 
    const totalsRef = doc(db, 'metrics/totals');
    setDoc(totalsRef, {total_posts: newPostID}, {merge : true})
        .then(() => { 
            console.log(`total posts is now: '${newPostID}'`); 
        })
        .catch((error) => { 
            console.log(`Error when incrementing post count: '${error}'`);
        }); 
}

/**
 * Delte the post data associated with the provided postID 
 * @param {Number} postID 
 */
export async function deletePost (postID) { 
    
}

// ============================ Helper Functions ============================

/**
 * Get the value for a given field within a Firestore document. Create the field 
 * with a default value if that field does not yes exist. 
 * 
 * @param {Firestore} db a reference to Firestore
 * @param {String} pathToDoc path to a collection in firestore
 * @param {String} field the field whose value we want to get 
 * @param {*} default default value for that field 
 */
async function getValueOfField(db, pathToDoc, field, defaultVal) { 
    const docRef = doc(db, pathToDoc); 
    const docSnapshot = getDoc(docRef); 
    if ((await docSnapshot).exists) {  
        return (await docSnapshot).get(field);
    } else { 
        return await defaultVal; 
    }
}

/**
 * Get all data stored for within a given document in Firestore. 
 * 
 * Firestore will return document data as 'undefined' if the document DNE, 
 * in which case we throw an error. 
 * 
 * @param {Firestore} db 
 * @param {String} pathToDoc 
 */
async function getAllDocumentData(db, pathToDoc) { 
    const docRef = doc(db, pathToDoc);
    const docData = getDoc(docRef);
    if ( (await docData).data == undefined) { 
        throw new Error(`Error when getting document data: document ${docRef.id} does not exist` ); 
    } else { 
        return (await docData).data(); 
    }
}

/**
 * Get data from an HTMLFormElement and construct a dictionary to hold the data.
 * 
 * Helpful links for using form-data node module: 
 * - https://developer.mozilla.org/en-US/docs/Web/API/FormData
 * - https://www.npmjs.com/package/form-data
 * 
 * In order to use the form-data node module, you must run the following in the 
 * terminal: $npm i form-data --save
 * 
 * @param {String} formName the HTML name attribute of a form 
 */
export async function getFormData(formName) { 
    const formDataArr = [];   
    // get form as HTMLFormElement using HTML name attribute 
    const newForm = document.forms.namedItem(formName);
    // if form not null, create data dictionary 
    if (newForm) {  
        let formData = new FormData(newForm); 
        for (const [newKey, newValue] of formData) { 
            formDataArr.push({key: newKey, value: newValue}); 
        }
    }
    return formDataArr;
}

/**
 * Get the current date in mm/dd/yyy format.
 */
function getTodayDate() { 
    const date = new Date();   
    const today = date.getMonth() + "/" + date.getDate() + "/" + date.getFullYear();
    return today; 
}
